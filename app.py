import streamlit as st
import pandas as pd
import fitz  # PyMuPDF
import re
import openpyxl
from datetime import datetime

st.set_page_config(page_title="Analisador P√≥s-Solar", layout="centered")
st.title("‚òÄÔ∏è Analisador de Gera√ß√£o e Consumo - P√≥s Energia Solar")
st.markdown("Envie **uma fatura (PDF)** e **dois relat√≥rios de gera√ß√£o (XLS)** para an√°lise exata do per√≠odo da leitura.")

# Uploads
fatura = st.file_uploader("üìÑ Enviar fatura (PDF):", type=["pdf"])
geracoes = st.file_uploader("üìä Enviar dois relat√≥rios de gera√ß√£o (XLS):", type=["xls", "xlsx"], accept_multiple_files=True)

def extrair_texto_pdf(fatura):
    texto = ""
    with fitz.open(stream=fatura.read(), filetype="pdf") as doc:
        for page in doc:
            texto += page.get_text()
    return texto

def extrair_dados_pdf(texto):
    injecao_match = re.search(r"ENERGIA INJETADA.*?(\d{1,6})\s", texto)
    consumo_match = re.search(r"ENERGIA ELET CONSUMO\s+(\d{1,6})", texto)
    credito_match = re.search(r"Saldo Acumulado.*?Todos os Per√≠odos\s+(\d{1,6})", texto)
    data_ini_match = re.search(r"Leitura anterior\s*[:\-]?\s*(\d{2}\/\d{2}\/\d{4})", texto, re.IGNORECASE)
    data_fim_match = re.search(r"Leitura atual\s*[:\-]?\s*(\d{2}\/\d{2}\/\d{4})", texto, re.IGNORECASE)

    energia_injetada = int(injecao_match.group(1)) if injecao_match else 0
    energia_consumida = int(consumo_match.group(1)) if consumo_match else 0
    creditos = int(credito_match.group(1)) if credito_match else 0
    data_inicio = datetime.strptime(data_ini_match.group(1), "%d/%m/%Y") if data_ini_match else None
    data_fim = datetime.strptime(data_fim_match.group(1), "%d/%m/%Y") if data_fim_match else None
    st.text_area("üîé Texto extra√≠do do PDF:", texto, height=300)

    return energia_consumida, energia_injetada, creditos, data_inicio, data_fim
    

def extrair_gerado_xls_filtrado(arquivos, data_inicio, data_fim):
    total_kwh = 0.0
    for arquivo in arquivos:
        wb = openpyxl.load_workbook(arquivo, data_only=True)
        for sheet in wb.sheetnames:
            aba = wb[sheet]
            headers = [cell.value for cell in aba[1]]
            if "Time" in headers and "Yield(kWh)" in headers:
                idx_data = headers.index("Time") + 1
                idx_geracao = headers.index("Yield(kWh)") + 1

                for row in aba.iter_rows(min_row=2):
                    data_val = row[idx_data - 1].value
                    kwh_val = row[idx_geracao - 1].value
                    if isinstance(data_val, datetime) and data_inicio <= data_val <= data_fim:
                        try:
                            total_kwh += float(kwh_val)
                        except:
                            pass
    return total_kwh

# Processamento
if fatura and geracoes and len(geracoes) == 2:
    st.markdown(f"### üìÇ An√°lise: `{fatura.name}` + 2 arquivos de gera√ß√£o")

    texto = extrair_texto_pdf(fatura)
    energia_consumida, energia_injetada, creditos, data_inicio, data_fim = extrair_dados_pdf(texto)

    if not data_inicio or not data_fim:
        st.error("‚ùå N√£o foi poss√≠vel identificar o per√≠odo de leitura na fatura.")
    else:
        gerado_kwh = extrair_gerado_xls_filtrado(geracoes, data_inicio, data_fim)

        total_utilizado = energia_consumida + energia_injetada
        eficiencia = (gerado_kwh / total_utilizado * 100) if total_utilizado > 0 else 0
        desempenho = (energia_injetada / gerado_kwh * 100) if gerado_kwh > 0 else 0
        consumo_total = gerado_kwh  # estimado como gera√ß√£o total se s√≥ houver gera√ß√£o

        # Resultados
        st.subheader("üîç Resultados")
        st.markdown(f"**üìÑ Fatura:** `{fatura.name}`")
        st.write(f"üìÜ Per√≠odo da fatura: **{data_inicio.strftime('%d/%m/%Y')} a {data_fim.strftime('%d/%m/%Y')}**")
        st.write(f"üìä Gera√ß√£o total no per√≠odo: **{gerado_kwh:.2f} kWh**")
        st.write(f"‚ö° Consumo instant√¢neo (da rede): **{energia_consumida} kWh**")
        st.write(f"üîÅ Energia injetada na rede: **{energia_injetada} kWh**")
        st.write(f"üí≥ Cr√©ditos acumulados: **{creditos} kWh**")
        st.write(f"üìà Efici√™ncia de uso da gera√ß√£o: **{eficiencia:.1f}%**")
        st.write(f"üéØ Desempenho da gera√ß√£o vs. meta: **{desempenho:.1f}%**")
        st.write(f"üìç Consumo total estimado no per√≠odo: **{consumo_total:.2f} kWh**")

        # Sugest√µes
        st.subheader("üí° Sugest√µes")
        if gerado_kwh == 0:
            st.markdown("- ‚ö†Ô∏è Gera√ß√£o abaixo do esperado: verificar sombreamentos ou falhas no sistema.")
        if creditos > 500:
            st.markdown("- üè¶ Cr√©ditos acumulados altos: considere redimensionar o sistema.")
        if desempenho < 70:
            st.markdown("- üí° Baixo desempenho de gera√ß√£o: poss√≠vel problema de dimensionamento.")
        if eficiencia < 70:
            st.markdown("- ü§ì Baixa efici√™ncia de uso: pode haver subutiliza√ß√£o da gera√ß√£o.")
        if energia_injetada > gerado_kwh * 0.7:
            st.markdown("- üîÖ Alta inje√ß√£o na rede: consumo local est√° baixo, considerar redimensionar.")
else:
    st.info("üìå Envie uma fatura e exatamente **2 arquivos de gera√ß√£o** para a an√°lise.")
